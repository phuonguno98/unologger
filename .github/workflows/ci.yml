name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build-and-test:
    name: build-test (${{ matrix.os }}, go ${{ matrix.go }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        go: [ '1.25.x' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ${{ runner.temp }}\go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go }}-

      - name: Download modules
        run: go mod download

      - name: Vet
        run: go vet ./...

      - name: Check formatting (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          fmt_out=$(gofmt -s -l .)
          if [ -n "$fmt_out" ]; then
            echo "Files need gofmt:" && echo "$fmt_out"
            exit 1
          fi

      - name: Check formatting (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $fmt = gofmt -s -l .
          if ($fmt) {
            echo "Files need gofmt:"
            echo $fmt
            exit 1
          }

      - name: Build
        run: go build ./...

      - name: Test
        run: go test -race -coverprofile=coverage.out ./...

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}
          path: coverage.out
